{"version":3,"sources":["components/DynamicForm/DynamicForm.tsx","consts/index.tsx","components/AppMainBar/AppMainBar.style.ts","components/AppMainBar/AppMainBar.tsx","components/AppDrawer/AppDrawer.style.ts","components/AppDrawer/AppDrawer.tsx","components/App.style.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["DynamicForm","formFields","useForm","register","watch","createNewFormField","field","type","TextField","fullWidth","variant","name","multiline","rows","createFieldPreview","fieldValue","result","undefined","dayjs","format","Grid","container","direction","spacing","map","item","xs","alignItems","justifyContent","drawerWidth","formFieldsMenuItem","icon","makeStyles","theme","createStyles","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","display","AppMainBar","isOpen","setIsOpen","classes","useStyles","AppBar","position","className","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","noWrap","drawer","flexShrink","drawerPaper","drawerHeader","padding","mixins","toolbar","nested","paddingLeft","AppDrawer","setFormFields","React","useState","subMenuOpen","setSubMenuOpen","formFieldId","setFormFieldId","Drawer","anchor","open","paper","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","Collapse","in","timeout","unmountOnExit","component","disablePadding","i","console","log","menuItem","root","content","textAlign","marginTop","contentShift","App","menuOpen","setMenuOpen","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7c3305c.chunk.js","sourcesContent":["import React from 'react';\nimport dayjs from 'dayjs';\nimport { useForm } from 'react-hook-form';\nimport { Grid, TextField } from '@material-ui/core';\nimport { FormField } from '../../types';\n\n\nexport interface DynamicFormProps {\n    formFields: FormField[]\n}\n\nexport const DynamicForm = ({formFields}: DynamicFormProps) => {\n    const {register, watch} = useForm()\n\n    const createNewFormField = (field: FormField) => {\n        switch (field.type) {\n            case \"Text Field\":\n                return (\n                    <TextField\n                        fullWidth\n                        variant={'outlined'}\n                        {...register(field.name)}\n                    />\n                )\n            case \"Text Area\":\n                return (\n                    <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        variant={'outlined'}\n                        {...register(field.name)}\n                    />\n                )\n            case \"Date / Time\":\n                return (\n                    <TextField\n                        type={'datetime-local'}\n                        fullWidth\n                        variant={'outlined'}\n                        {...register(field.name)}\n                    />\n                )\n        }\n    }\n\n    const createFieldPreview= (field: FormField) => {\n        const fieldValue = watch(field.name);\n        const result = field.type === 'Date / Time'\n            ? fieldValue !== undefined ? dayjs(fieldValue).format('YYYY-MM-DD hh:mm') : undefined\n            : fieldValue\n\n        return <div>{result}</div>\n    }\n\n  return (\n      <form>\n          <Grid container direction={'column'} spacing={2}>\n              {formFields.map(field => {\n                  return <Grid\n                      key={field.name}\n                      item\n                      xs={12}\n                      container\n                      alignItems={'center'}\n                      justifyContent={'space-between'}\n                  >\n                      <Grid item container xs={5} direction={'column'}>\n                          <Grid item>\n                              {field.type}\n                          </Grid>\n                          <Grid item>\n                              {createNewFormField(field)}\n                          </Grid>\n                      </Grid>\n\n                      <Grid item xs={5}>\n                          {createFieldPreview(field)}\n                      </Grid>\n                  </Grid>\n              })}\n          </Grid>\n      </form>\n  );\n}\n","import { FormFieldMenuItem } from '../types';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport TextRotationNoneIcon from '@material-ui/icons/TextRotationNone';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\n\nexport const drawerWidth = 240;\n\nexport const formFieldsMenuItem: FormFieldMenuItem[] = [\n    {\n        type: 'Text Field',\n        icon: <TextFieldsIcon />\n    },\n    {\n        type: 'Text Area',\n        icon: <TextRotationNoneIcon />\n    },\n    {\n        type: 'Date / Time',\n        icon: <DateRangeIcon/>\n    }\n]","import { makeStyles } from '@material-ui/core/styles';\nimport { createStyles, Theme } from '@material-ui/core';\nimport { drawerWidth } from '../../consts';\n\nexport default makeStyles((theme: Theme) =>\n    createStyles({\n        appBar: {\n            transition: theme.transitions.create(['margin', 'width'], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n        },\n        appBarShift: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            marginLeft: drawerWidth,\n            transition: theme.transitions.create(['margin', 'width'], {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        hide: {\n            display: 'none',\n        }\n    }),\n);\n","import React from 'react';\nimport clsx from 'clsx';\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport useStyles from './AppMainBar.style';\n\nexport interface AppMainBarProps {\n    isOpen: boolean\n    setIsOpen: (isOpen: boolean) => void\n}\n\nexport const AppMainBar = ({isOpen, setIsOpen}: AppMainBarProps) => {\n    const classes = useStyles();\n\n    const handleAppDrawerOpen = () => {\n        setIsOpen(true);\n    };\n\n  return (\n    <AppBar\n      position=\"fixed\"\n      className={clsx(classes.appBar, {\n        [classes.appBarShift]: isOpen,\n      })}\n    >\n        <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleAppDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, isOpen && classes.hide)}\n            >\n                <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n                Dynamic form\n            </Typography>\n        </Toolbar>\n    </AppBar>\n  );\n}\n","import { makeStyles } from '@material-ui/core/styles';\nimport { createStyles, Theme } from '@material-ui/core';\nimport { drawerWidth } from '../../consts';\n\nexport default makeStyles((theme: Theme) =>\n    createStyles({\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        drawerHeader: {\n            display: 'flex',\n            alignItems: 'center',\n            padding: theme.spacing(0, 1),\n            // necessary for content to be below app bar\n            ...theme.mixins.toolbar,\n            justifyContent: 'flex-end',\n        },\n        nested: {\n            paddingLeft: theme.spacing(4),\n        },\n    }),\n);\n","import React from 'react';\nimport {\n    Collapse,\n    Divider,\n    Drawer,\n    List\n} from '@material-ui/core';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport AddIcon from '@material-ui/icons/Add';\nimport { FormField, FormFieldMenuItem } from \"../../types\";\nimport { formFieldsMenuItem } from '../../consts';\nimport useStyles from './AppDrawer.style'\n\n\nexport interface AppDrawerProps {\n    isOpen: boolean\n    setIsOpen: (isOpen: boolean) => void\n    formFields: FormField[]\n    setFormFields: (field: FormField[]) => void\n}\n\nexport const AppDrawer = ({isOpen, setIsOpen, formFields, setFormFields}: AppDrawerProps) => {\n    const classes = useStyles();\n    const [subMenuOpen, setSubMenuOpen] = React.useState<boolean>(false);\n    const [formFieldId, setFormFieldId] = React.useState<number>(0)\n\n\n    const handleDrawerClose = () => {\n        setIsOpen(false);\n    };\n    const handleMenuItemClick = () => {\n        setSubMenuOpen(!subMenuOpen);\n    };\n    const onCreateNewFieldClick = (menuItem: FormFieldMenuItem) => {\n        setFormFields([...formFields, {\n            type: menuItem.type,\n            name: `${menuItem.type}${formFieldId}`\n        }])\n        setFormFieldId(formFieldId + 1)\n    }\n\n  return (\n      <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={isOpen}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n              <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button onClick={handleMenuItemClick}>\n              <ListItemIcon>\n                  <AddIcon />\n              </ListItemIcon>\n              <ListItemText primary={'Add form fields'} />\n              {subMenuOpen ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n          <Collapse in={subMenuOpen} timeout=\"auto\" unmountOnExit>\n              <List component=\"div\" disablePadding>\n                  {\n                      formFieldsMenuItem.map((item, i) => {\n                          console.log(`${item.type} ${i}`)\n                          return (\n                              <ListItem\n                                  key={item.type}\n                                  button className={classes.nested}\n                                  onClick={() => onCreateNewFieldClick(item)}\n                              >\n                                  <ListItemIcon>\n                                      {item.icon}\n                                  </ListItemIcon>\n                                  <ListItemText primary={item.type} />\n                              </ListItem>\n                          )\n                      })\n                  }\n              </List>\n          </Collapse>\n        </List>\n      </Drawer>\n  );\n}\n","import {makeStyles} from \"@material-ui/core/styles\";\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst drawerWidth = 240;\n\nexport default makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        appBar: {\n            transition: theme.transitions.create(['margin', 'width'], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n        },\n        appBarShift: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            marginLeft: drawerWidth,\n            transition: theme.transitions.create(['margin', 'width'], {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        hide: {\n            display: 'none',\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        drawerHeader: {\n            display: 'flex',\n            alignItems: 'center',\n            padding: theme.spacing(0, 1),\n            // necessary for content to be below app bar\n            ...theme.mixins.toolbar,\n            justifyContent: 'flex-end',\n        },\n        content: {\n            // flexGrow: 1,\n            padding: theme.spacing(6),\n            transition: theme.transitions.create('margin', {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n            marginLeft: 0,\n            textAlign: 'left',\n            marginTop: theme.spacing(4)\n        },\n        contentShift: {\n            transition: theme.transitions.create('margin', {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n            marginLeft: drawerWidth,\n        },\n        nested: {\n            paddingLeft: theme.spacing(4),\n        },\n    }),\n);\n","import React from 'react';\nimport clsx from 'clsx';\nimport { CssBaseline } from '@material-ui/core';\nimport { DynamicForm } from './DynamicForm/DynamicForm';\nimport { AppMainBar } from './AppMainBar/AppMainBar';\nimport { AppDrawer } from './AppDrawer/AppDrawer';\nimport { FormField } from '../types';\nimport useStyles from './App.style';\n\n\nconst App = () => {\n    const classes = useStyles();\n    const [menuOpen, setMenuOpen] = React.useState<boolean>(false);\n    const [formFields, setFormFields] = React.useState<FormField[]>([]);\n\n  return (\n    <>\n        <CssBaseline />\n        <AppMainBar\n            isOpen={menuOpen}\n            setIsOpen={setMenuOpen}\n        />\n        <AppDrawer\n            isOpen={menuOpen}\n            setIsOpen={setMenuOpen}\n            formFields={formFields}\n            setFormFields={setFormFields}\n        />\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: menuOpen,\n          })}\n        >\n          <DynamicForm formFields={formFields}/>\n        </main>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}